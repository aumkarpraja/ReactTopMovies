{"version":3,"sources":["apiKey.js","components/MovieCard.js","components/MovieDialog.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","selectMovie","props","movie","this","Card","className","CardActionArea","CardMedia","image","backdrop_path","title","CardContent","Typography","gutterBottom","variant","component","color","overview","CardActions","Button","size","onClick","React","Component","MovieDialog","handleClose","content","DialogTitle","id","DialogContent","DialogContentText","release_date","Dialog","open","onClose","aria-labelledby","DialogActions","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","App","state","movies","selectedMovie","searchText","setState","clearMovie","search","e","a","preventDefault","fetch","apiKey","response","json","console","log","results","searchTextChanged","target","value","AppBar","position","Toolbar","onSubmit","Input","type","onChange","placeholder","map","key","withStyles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e3ee1df.chunk.js","sourcesContent":["export default '8faa6c7a07d68028d68b5950e7751b83';\r\n","import React from \"react\";\r\nimport \"./MovieCard.css\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass MovieCard extends React.Component {\r\n  selectMovie = () => {\r\n    const { movie, selectMovie } = this.props;\r\n    selectMovie(movie);\r\n  };\r\n\r\n  render() {\r\n    const { movie } = this.props;\r\n    return (\r\n      <Card className=\"movie-card\">\r\n        <CardActionArea>\r\n          <CardMedia\r\n            className=\"movie-image\"\r\n            image={`http://image.tmdb.org/t/p/w300${movie.backdrop_path}`}\r\n            title={movie.title}\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {movie.title}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              {movie.overview}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <Button size=\"small\" color=\"primary\" onClick={this.selectMovie}>\r\n            Learn More\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nexport default class MovieDialog extends React.Component {\r\n  render() {\r\n    const { movie, handleClose } = this.props;\r\n\r\n    let title = null;\r\n    let content = null;\r\n\r\n    // Avoid null errors on title if movie does not exist\r\n    if ( movie ) {\r\n      title = <DialogTitle id=\"form-dialog-title\">{ movie.title }</DialogTitle>;\r\n      content = (\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Release Date: { movie.release_date }\r\n            <br />\r\n            <br />\r\n            { movie.overview }\r\n          </DialogContentText>\r\n        </DialogContent>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Dialog open={ !!movie } onClose={ handleClose } aria-labelledby=\"form-dialog-title\">\r\n          { title }\r\n          { content }\r\n          <DialogActions>\r\n            <Button onClick={ handleClose } color=\"primary\">\r\n              Close\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport apiKey from \"./apiKey\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport MovieCard from \"./components/MovieCard\";\r\nimport MovieDialog from \"./components/MovieDialog\";\r\n\r\nconst useStyles = makeStyles(( theme ) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nclass App extends Component {\r\n  state = {\r\n    movies: [],\r\n    selectedMovie: null,\r\n    searchText: null,\r\n  };\r\n\r\n  selectMovie = (movie) => this.setState({ selectedMovie: movie });\r\n\r\n  clearMovie = () => this.setState({ selectedMovie: null });\r\n\r\n  search = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { searchText } = this.state;\r\n    const response = await fetch(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${searchText}&page=1&include_adult=false`\r\n    );\r\n    const json = await response.json();\r\n    console.log(json);\r\n    this.setState({ movies: json.results });\r\n  };\r\n\r\n  searchTextChanged = (e) => this.setState({ searchText: e.target.value });\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch(\r\n      `https://api.themoviedb.org/3/movie/top_rated?api_key=${apiKey}&language=en-US&page=1`\r\n    );\r\n    const json = await response.json();\r\n    this.setState({ movies: json.results });\r\n  }\r\n\r\n  render() {\r\n    const { movies, selectedMovie, searchText } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className=\"titleBar\">\r\n              Top Movies\r\n            </Typography>\r\n            <form onSubmit={this.search}>\r\n              <Input\r\n                type=\"search\"\r\n                value={searchText}\r\n                onChange={this.searchTextChanged}\r\n                placeholder=\"Search\"\r\n              ></Input>\r\n            </form>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <div className=\"movies\">\r\n          {movies.map((movie) => (\r\n            <MovieCard className=\"movieCard\"\r\n              key={movie.id}\r\n              movie={movie}\r\n              selectMovie={this.selectMovie}\r\n            />\r\n          ))}\r\n        </div>\r\n        <MovieDialog movie={selectedMovie} handleClose={this.clearMovie} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}